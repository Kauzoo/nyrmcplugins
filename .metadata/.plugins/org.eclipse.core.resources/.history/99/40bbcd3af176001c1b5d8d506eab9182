package dev.nyr.main;

import java.util.HashMap;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.Chest;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;

import dev.nyr.main.SettingsWriter.SettingType;

public class QuickStackCore 
{

	/*
	 * Handles looking for chests
	 */
	public static void lookForChests(Player player, int xSearchRadius, int ySearchRadius, int zSearchRadius, boolean debug)
	{
		player.sendMessage("Searching for chests in your area");
		int[] positionVector = { player.getLocation().getBlockX(), player.getLocation().getBlockY(), player.getLocation().getBlockZ() };
		player.sendMessage("Using position " + "(" + positionVector[0] + "|" + positionVector[1] + "|" + positionVector[2] + ")");
		player.sendMessage("Using SideLength X:" + xSearchRadius * 2 + " Y:" + ySearchRadius * 2 + " Z:" + zSearchRadius * 2);
		
		// x-Loop
		for(int i = positionVector[0] - xSearchRadius; i < positionVector[0] + xSearchRadius; i++)
		{
			// y-Loop
			for(int j = positionVector[1] - ySearchRadius; j < positionVector[1] + ySearchRadius; j++)
			{
				// z-Loop
				for(int k = positionVector[2] - zSearchRadius; k < positionVector[2] + zSearchRadius; k++)
				{
					Block block = new Location(player.getWorld(), i, j, k).getBlock();
					if(debug)
					{
						player.sendMessage("Looking for block @ (" + i + "|" + j + "|" + k + ") Block was " + block.getType().toString());
					}
					if(block.getType() == Material.CHEST)
					{
						if(debug)
						{
							player.sendMessage("Chest detected @ (" + i + "|" + j + "|" + k + ")");
							System.out.println("Chest detected @ (" + i + "|" + j + "|" + k + ")");
						}
						handleQuickStack(player, (Chest) block.getState(), debug);
					}
				}
			}
		}
	}
	
	/*
	 * Quickstacks to a chest
	 */
	public static void handleQuickStack(Player player, Chest chest, boolean debug)
	{
		Inventory chestInventory = chest.getInventory();
		Inventory playerInventory = player.getInventory();
		
		String[] excludeArray = SettingsWriter.ReadFile(SettingType.QUICKSTACK_PLAYER, player.getDisplayName());
		for(ItemStack itemStack : playerInventory.getStorageContents())
		{
			if(itemStack != null && chest.getInventory().contains(itemStack.getType()))
			{
				
				HashMap<Integer, ItemStack> itemOverflow = chestInventory.addItem(itemStack);
				if(itemOverflow.isEmpty())
				{
					playerInventory.remove(itemStack);
				}
				else if(debug)
				{
					player.sendMessage("item overflow");
				}
			}
		}
	}
	
	@SuppressWarnings("deprecation")
	public static void AddQuickStackExclude(SettingType type, Player player)
	{
		if(player.getItemInHand() != null)
		{
			try
			{
				SettingsWriter.AddSetting(type, UsefullListener.QuickStackDefaults.quickStackExludeKey, "=", player.getItemInHand().getType().toString(), player.getDisplayName());
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}
	
	@SuppressWarnings("deprecation")
	public static void RemoveQuickStackExcludeForPlayer(SettingType type, Player player)
	{
		if(player.getItemInHand() != null)
		{
			try
			{
				SettingsWriter.AddSetting(type, UsefullListener.QuickStackDefaults.quickStackExludeKey, "=", player.getItemInHand().getType().toString(), player.getDisplayName());
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
		}
	}
	
	/*
	 * Helper
	 */
	public static void printQuickStackHelp(Player player)
	{
		player.sendMessage("WARNING: Exoerimental");
		player.sendMessage("Usage: " + enableQuickStackString + "	(Run with default values)");
		player.sendMessage("Usage: " + enableQuickStackString + " " + sideValueFlag + valueFlagDelim + "<int>" + "	(Run with cube side length a)");
		player.sendMessage("Usage: " + enableQuickStackString + " " + xValueFlag + valueFlagDelim + "<int>" + " " + yValueFlag + valueFlagDelim + "<int>" + " " + zValueFlag + valueFlagDelim + "<int>" + "	(Run with custom side length x y z)");
		player.sendMessage("MaxSearchRadius: " + searchRadiusMax);
	}
}
